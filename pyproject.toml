[project]
name = "workflow-use-suite"
version = "1.0.0"
description = "Enterprise-grade workflow automation suite with browser-use integration"
authors = [
    {name = "Workflow-Use Team", email = "team@workflow-use.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
keywords = ["workflow", "automation", "browser", "ai", "rpa"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Office/Business :: Office Suites",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "python-multipart>=0.0.6",
    
    # Browser automation
    "playwright>=1.40.0",
    "selenium>=4.15.0",
    "undetected-chromedriver>=3.5.0",
    
    # Web UI frameworks
    "gradio>=4.0.0",
    "streamlit>=1.28.0",
    "nicegui>=1.4.0",
    
    # HTTP and networking
    "requests>=2.31.0",
    "httpx>=0.25.0",
    "aiohttp>=3.9.0",
    "websockets>=12.0",
    
    # Data processing and storage
    "pandas>=2.1.0",
    "numpy>=1.24.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "redis>=5.0.0",
    
    # AI and ML
    "openai>=1.3.0",
    "anthropic>=0.7.0",
    "google-generativeai>=0.3.0",
    "langchain>=0.1.0",
    "langchain-community>=0.0.10",
    
    # Environment and configuration
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.1",
    "toml>=0.10.2",
    "configparser>=6.0.0",
    
    # Logging and monitoring
    "loguru>=0.7.0",
    "rich>=13.7.0",
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",
    
    # Security and authentication
    "cryptography>=41.0.0",
    "passlib[bcrypt]>=1.7.4",
    "python-jose[cryptography]>=3.3.0",
    "python-multipart>=0.0.6",
    
    # Task queue and scheduling
    "celery>=5.3.0",
    "redis>=5.0.0",
    "apscheduler>=3.10.0",
    
    # Development utilities
    "click>=8.1.0",
    "typer>=0.9.0",
    "tqdm>=4.66.0",
    "psutil>=5.9.0",
    
    # File handling
    "openpyxl>=3.1.0",
    "pillow>=10.1.0",
    "python-magic>=0.4.27",
    
    # Validation and parsing
    "jsonschema>=4.20.0",
    "marshmallow>=3.20.0",
    "cerberus>=1.3.4",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.5.0",
    "factory-boy>=3.3.0",
    "faker>=20.1.0",
    
    # Code quality
    "black>=23.9.0",
    "ruff>=0.1.0",
    "mypy>=1.6.0",
    "isort>=5.12.0",
    "pre-commit>=3.5.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
    
    # Performance profiling
    "py-spy>=0.3.14",
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.0",
]

production = [
    "gunicorn>=21.2.0",
    "supervisor>=4.2.5",
    "nginx>=1.25.0",
]

docker = [
    "docker>=6.1.0",
    "docker-compose>=1.29.0",
]

[project.urls]
Homepage = "https://github.com/browser-use/workflow-use"
Documentation = "https://workflow-use.readthedocs.io"
Repository = "https://github.com/browser-use/workflow-use.git"
"Bug Tracker" = "https://github.com/browser-use/workflow-use/issues"

[project.scripts]
workflow-use = "workflow_use.cli:main"
wf-backend = "workflow_use.backend.main:run"
wf-webui = "workflow_use.webui.main:run"
wf-deploy = "workflow_use.deployment.main:deploy"

[build-system]
requires = ["hatchling>=1.18.0"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "workflow_use/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["workflow_use"]

[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-argument
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q", # flake8-quotes
    "FLY", # flynt
    "PERF", # perflint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["ARG", "FBT"]

[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["workflow_use"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "playwright.*",
    "selenium.*",
    "gradio.*",
    "streamlit.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "browser: marks tests that require browser automation",
]

[tool.coverage.run]
source = ["workflow_use"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
    "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

